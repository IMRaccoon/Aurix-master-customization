/*
 * LineFiltering.c
 *
 *  Created on: 2019. 6. 27.
 *      Author: DoHyeon Jeon
 */


#include "LineFiltering.h"

uint32 filterResult[2][128];
sint16 edgeIndex[2][2];
boolean isSchool;
uint8 schoolCount;
uint8 prevLeft, prevRight;

struct Sigma {
   float64 sig;
   uint8 index;
}sigma[127];

struct cumlHist{
	float64 sum;
	uint32 cnt;
}cumlhist[129];


uint32 hist[128];
uint32 threshold = 0;

uint32 histogram_otsu(uint32 * data)
{

   uint16 i, k, t;
   float64 var_bg;
   float64 var_fg;
   /* make histogram */
   for (k = 0; k < 128; k++) {
   	   cumlhist[k].cnt = 0;
   	   cumlhist[k].sum = 0;
   	   hist[k] = 0;
   }
   cumlhist[128].cnt = 0;
   cumlhist[128].sum = 0;

   for (k = 0; k < 128; k++) {
	   uint32 temp = (data[k] >> COMPRESSION);
	   cumlhist[temp+1].cnt++;
	   cumlhist[temp+1].sum += temp;
	   hist[temp]++;
   }
   for (k = 0; k < 128; k++) {
   	   cumlhist[k+1].cnt += cumlhist[k].cnt;
   	   cumlhist[k+1].sum += cumlhist[k].sum;
   }
   //calling OTSU
   for (t = 1; t < 128; t++)
   {
	  var_bg = otsu(0, t) ;
	  var_fg = otsu(t + 1, 128 - 1);

	  sigma[t-1].sig = (var_bg * 0.7 + var_fg * 0.3);
	  sigma[t-1].index = t;
   }
   struct Sigma min = { sigma[0].sig, sigma[0].index };
   for (i = 0; i < 128 - 1; i++)
   {
	   if (min.sig > sigma[i].sig) {
		   min.sig = sigma[i].sig;
		   min.index = sigma[i].index;
	   }
   }

   return (min.index << COMPRESSION);
}


float64 otsu(uint16 min, uint16 max)
{
	uint16 j;
	float64 mean = 0.0, wt_bg, sum = 0.0, mean_bg, var = 0.0, var_bg;
	float64 varience, sq, diff;

	mean = cumlhist[max].sum - cumlhist[min].sum;
	sum = cumlhist[max].cnt - cumlhist[min].cnt;
	if (sum != 0.0)
	{
		wt_bg = sum / (SIGMA_SIZE >> COMPRESSION);
		mean_bg = mean / sum;
		for (j = min; j <= max; j++)
		{
		 diff = j - mean_bg;
		 sq = diff * diff;
		 var = var + (sq*(hist[j]));
		}
		var_bg = var / sum;
		varience = wt_bg * var_bg*var_bg;
		return (varience);
	}
	else
		return(0.0);
}


/************Filtering Start Function**************************/
void getThreshhold(){
	threshold = histogram_otsu(IR_LineScan.adcResult[0]) + histogram_otsu(IR_LineScan.adcResult[1]);
	threshold >>= 1;
	return;
}
void LineFiltering()
{
	for(uint8 i =0;i<2;i++) {
		for(uint8 j =0;j<128;j++){
			if(IR_LineScan.adcResult[i][j] > threshold) {
				filterResult[i][j] = 4095;
			}
			else {
				filterResult[i][j] = 0;
			}
		}
	}
	edgeDetection();

	return;
}

void edgeDetection() {
	uint8 i, j;
	uint8 edgeNum = 0;
	boolean isEdge;

	for(i = 0; i < 2; i++) {
		isEdge = TRUE;
		for(j = 0; j < 128; j++) {
			if(!((filterResult[i][j] & 1) ^ isEdge)) {
				edgeIndex[i][edgeNum % 2] = j;
				edgeNum += 1;
				isEdge = !isEdge;
			}
		}
	}

	if(edgeNum > 4) {
		// School Zone Detection
		schoolCount += 1;
		if(schoolCount == 5) {
			isSchool = !isSchool;
		}
		return;
	}
	else if(edgeNum != 4) {
		if(sizeof(edgeIndex[i]) != 2) {
			if(edgeIndex[0][0] - prevLeft > 0){
				edgeIndex[0][1] = edgeIndex[0][0];
				edgeIndex[0][0] = edgeIndex[0][1] - LEFTINTERVAL;
			}

			else {
				edgeIndex[0][1] = edgeIndex[0][0] + LEFTINTERVAL;
			}
		}
		if(sizeof(edgeIndex[1]) != 2) {
			if(edgeIndex[1][0] - prevRight > 0) {
				edgeIndex[1][1] = edgeIndex[1][0];
				edgeIndex[1][0] = edgeIndex[1][1] - RIGHTINTERVAL;
			}
			else {
				edgeIndex[1][1] = edgeIndex[1][0] + RIGHTINTERVAL;
			}
		}
		//renewLine(edgeIndex);
	}
	prevLeft = (edgeIndex[0][0] + edgeIndex[0][1]) / 2;
	prevRight = (edgeIndex[1][0] + edgeIndex[1][1]) / 2;
	schoolCount = 0;
	edgeNum = 0;
}
void renewLine(sint16 ** edge) {
	uint8 i;
	boolean leftWhite, rightWhite;
	leftWhite = rightWhite = FALSE;
	for(i = 0 ; i<128; i++) {
		if(edge[0][leftWhite] == i) {
			leftWhite = !leftWhite;
		}
		if(edge[1][rightWhite] == i) {
			rightWhite = !rightWhite;
		}
		filterResult[0][i] = leftWhite * 4095;
		filterResult[1][i] = rightWhite * 4095;
	}
}
float32 convertAngle(float32 raw_angle){
	if(raw_angle >=0){
		if(raw_angle > 15)
			return RIGHTMAXANGLE;
		else
	}else{
		if(raw_angle < -15)
			return LEFTMAXANGLE;
		else
	}
}
