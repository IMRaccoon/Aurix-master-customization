#include "MedianFilter.h"

extern uint32 medianResult[2][128];

void MedianFilter_run(uint32 * rawData, boolean isLeft) {
	uint8 i, j;
	uint32 median_tmp[MEDIAN_INTERVAL_SQUARE];
	if(isLeft) {
		for(i = MEDIAN_INTERVAL; i < 108 - MEDIAN_INTERVAL; i++) {
			for(j = i; j < i + MEDIAN_INTERVAL_SQUARE; j++) {
				median_tmp[j] = rawData[j];
			}
			Median_QuickSort(median_tmp, 0, MEDIAN_INTERVAL_SQUARE-1);
			//Median_Bubblesort(median_tmp);
			rawData[i] = median_tmp[MEDIAN_INTERVAL];
		}
	}
	else {
		for(i = 20; i < 128 - MEDIAN_INTERVAL; i++) {
			for(j = i; j < i + MEDIAN_INTERVAL_SQUARE; j++) {
				median_tmp[j] = rawData[j];
			}
			Median_QuickSort(median_tmp, 0, MEDIAN_INTERVAL_SQUARE-1);
			//Median_Bubblesort(median_tmp);
			rawData[i] = median_tmp[MEDIAN_INTERVAL];
		}
	}
}

void Median_Bubblesort(uint32 * data){
	uint32 swap = 0;
	for(uint8 i = 0; i <= MEDIAN_INTERVAL; i++) {
		for(uint8 j = i+1; j < MEDIAN_INTERVAL_SQUARE; i++) {
			if(data[i] > data[j]) {
				swap = data[i];
				data[i] = data[j];
				data[j] = swap;
			}
		}
	}
}

void Median_QuickSort(uint32 * data, int left, int right) {
	int L = left, R = right;
	int temp;
	int pivot = data[(left + right) / 2];

	while (L <= R) {
		while (data[L] < pivot) {
	      L++;
	    }
	    while (data[R] > pivot) {
	      R--;
	    }

	    if (L <= R) {
	    	if (L != R) {
	    		temp = data[L];
	    		data[L] = data[R];
	    		data[R] = temp;
	    	}
	    	L++; R--;
	    }
	  }
	if (left < R)
		Median_QuickSort(data, left, R);
	if (L < right)
		Median_QuickSort(data, L, right);
}
