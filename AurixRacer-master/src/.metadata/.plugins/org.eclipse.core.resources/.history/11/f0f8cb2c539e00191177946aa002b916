#include "LineFiltering.h"

uint32 filterResult[2][128];
boolean isSchool;
boolean isCorrected = FALSE;
uint8 schoolCount;
sint16 edgeRight,edgeLeft;
struct Sigma {
   float64 sig;
   uint8 index;
}sigma[127];

struct cumlHist{
	float64 sum;
	uint32 cnt;
}cumlhist[129];


uint32 hist[128];
uint32 threshold = 0;
float32 leftCam_Correction[49];

uint32 histogram_otsu(uint32 * data)
{

   uint16 i, k, t;
   float64 var_bg;
   float64 var_fg;
   /* make histogram */
   for (k = 0; k < 128; k++) {
   	   cumlhist[k].cnt = 0;
   	   cumlhist[k].sum = 0;
   	   hist[k] = 0;
   }
   cumlhist[128].cnt = 0;
   cumlhist[128].sum = 0;

   for (k = 20; k < 108; k++) {
	   uint32 temp = (data[k] >> COMPRESSION);
	   cumlhist[temp+1].cnt++;
	   cumlhist[temp+1].sum += temp;
	   hist[temp]++;
   }
   for (k = 0; k < 128; k++) {
   	   cumlhist[k+1].cnt += cumlhist[k].cnt;
   	   cumlhist[k+1].sum += cumlhist[k].sum;
   }
   //calling OTSU
   for (t = 0; t < 128; t++)
   {
	  var_bg = otsu(0, t) ;
	  var_fg = otsu(t + 1, 128 - 1);

	  sigma[t-1].sig = (var_bg * 0.6 + var_fg * 0.4);
	  sigma[t-1].index = t;
   }
   struct Sigma min = { sigma[0].sig, sigma[0].index };
   for (i = 0; i < 128 - 1; i++)
   {
	   if (min.sig > sigma[i].sig) {
		   min.sig = sigma[i].sig;
		   min.index = sigma[i].index;
	   }else if ((min.sig == sigma[i].sig) && (min.index > sigma[i].index)){
		   min.sig = sigma[i].sig;
		   min.index = sigma[i].index;
	   }
   }

   return (min.index << COMPRESSION);
}


float64 otsu(uint16 min, uint16 max)
{
	uint16 j;
	float64 mean = 0.0, wt_bg, sum = 0.0, mean_bg, var = 0.0, var_bg;
	float64 varience, sq, diff;

	mean = cumlhist[max].sum - cumlhist[min].sum;
	sum = cumlhist[max].cnt - cumlhist[min].cnt;
	if (sum != 0.0)
	{
		wt_bg = sum / (SIGMA_SIZE >> COMPRESSION);
		mean_bg = mean / sum;
		for (j = min; j <= max; j++)
		{
		 diff = j - mean_bg;
		 sq = diff * diff;
		 var = var + (sq*(hist[j]));
		}
		var_bg = var / sum;
		varience = wt_bg * var_bg*var_bg;
		return (varience);
	}
	else
		return(0.0);
}


/************Filtering Start Function**************************/
void getThreshhold(){
	threshold = histogram_otsu(medainResult[0]) + histogram_otsu(medainResult[1]);
	threshold >>= 1;
	return;
}
void LineFiltering()
{
	uint8 i, j;
	uint8 edgeNum = 0;

	if(!isCorrected) {
		lineCorrection_init();
		isCorrected = TRUE;
	}

	lineCorrection_run();

	MedianFilter_run(IR_LineScan.adcResult[0], FALSE);
	MedianFilter_run(IR_LineScan.adcResult[1], TRUE);
	// Draw Depend on threshold
	for(i =0;i<2;i++) {
		for(j =20;j<108;j++){
			if(medainResult[i][j] > threshold) {
				filterResult[i][j] = 4095;
				if(j >= 1 && !filterResult[i][j-1]){
					edgeNum += 1;
				}
			}
			else {
				filterResult[i][j] = 0;
				if(j >= 1 && filterResult[i][j-1]) {
					edgeNum += 1;
				}
			}
		}
	}

	// Search Edge
	edgeRight = 0;
	edgeLeft = 0;
	for(int i=(expect_l+expect_r/2 + ERROR_RANGE);i>=20;i--){
		if(filterResult[1][i]==0){
			edgeRight = i;
		}
	}
	for(int i=(expect_l+expect_r/2 - ERROR_RANGE);i<108;i++){
		if(filterResult[0][i]==0){
			edgeLeft = i;
		}
	}
	// If Number of Edge is bigger than 4, Count up the schoolZone Counter
	if(edgeNum > 4) {
		schoolCount += 1;
		if(schoolCount == 5) {
			isSchool = !isSchool;
		}
	}
	else {
		schoolCount = 0;
	}

	// Linear Regression Start
	LinearRegression_run(&edgeLeft, &edgeRight);

	// Draw new One
	/*leftWhite = rightWhite = FALSE;
	for(i = 0 ; i<128; i++) {
		if(edgeIndex[0][leftWhite] == i) {
			leftWhite = !leftWhite;
		}
		if(edgeIndex[1][rightWhite] == i) {
			rightWhite = !rightWhite;
		}
		filterResult[0][i] = leftWhite * 4095;
		filterResult[1][i] = rightWhite * 4095;
	}*/
	return;
}

float32 convertAngle(float32 raw_angle){
	if(raw_angle >=0){
		if(raw_angle > 15)
			return RIGHTMAXANGLE;
	}else{
		if(raw_angle < -15)
			return LEFTMAXANGLE;
	}
	return (((RIGHTMAXANGLE - LEFTMAXANGLE) / 30.0f)*(raw_angle-15.0) + RIGHTMAXANGLE);
}

void lineCorrection_init() {
	float32 biggest = 0;
	for(uint8 i = 60; i <= 108; i++) {
		biggest = biggest > IR_LineScan.adcResult[1][i] ? biggest : IR_LineScan.adcResult[1][i];
	}
	for(uint8 i = 60; i <= 108; i++) {
		leftCam_Correction[i-60] = biggest / (float32)IR_LineScan.adcResult[1][i];
	}
}

void lineCorrection_run() {
	for(uint8 i = 60; i<= 108; i++) {
		IR_LineScan.adcResult[1][i] = (IR_LineScan.adcResult[1][i] * leftCam_Correction[i-60]) > 4095 ? 4095 : (uint32)(IR_LineScan.adcResult[1][i] * leftCam_Correction[i-60]);
	}
}
